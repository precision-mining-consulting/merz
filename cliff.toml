[changelog]
# changelog header
header = """
# Merz Changelog

All notable changes to this project will be documented in this file.

"""
# template for the changelog body
body = """
{% if version -%}
## 🏷️ {{ timestamp | date(format="%Y %B") }} - `{{ version }}` release

{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim }}

{% for commit in commits -%}
- **{{ commit.message | split(pat="\n") | first | trim | upper_first }}**
{% if commit.body %}  {{ commit.body | trim | indent(prefix="  ") }}
{% endif %}  ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/precision-mining-consulting/pm-spry-tools/commit/{{ commit.id }}))

{% endfor %}

{% endfor -%}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """

---

<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  # Clean up extra newlines and spacing
  { pattern = '\n\n\n+', replace = "\n\n" },
  # Fix bullet point spacing
  { pattern = '\n- ', replace = "\n- " },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Clean up commit messages
  { pattern = '\s+', replace = " " },
  # Remove trailing periods
  { pattern = '\.$', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
  # Critical fixes first
  { message = "^Fix.*crash", group = "🚨 Critical Fixes" },
  { message = "^Fix.*security", group = "🔒 Security Fixes" },

  # Conventional commits
  { message = "^feat", group = "✨ Features" },
  { message = "^fix", group = "🐛 Bug Fixes" },
  { message = "^doc", group = "📚 Documentation" },
  { message = "^perf", group = "⚡ Performance" },
  { message = "^refactor", group = "♻️ Refactoring" },
  { message = "^style", group = "🎨 Styling" },
  { message = "^test", group = "🧪 Testing" },

  # Skip noise commits
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^Merge pull request", skip = true },
  { message = "^Merge branch", skip = true },
  { message = "^WIP:", skip = true },
  { message = "^wip:", skip = true },

  # Your current commit patterns (prioritized by importance)
  { message = "^Updates? pm-spry-tools submodule", group = "📦 Dependency Updates" },
  { message = "^Add.*release notes", group = "📝 Release Process" },
  { message = "^Add.*workflow", group = "🔄 CI/CD" },
  { message = "^Add.*tool", group = "🔧 New Tools" },
  { message = "^Add.*feature", group = "✨ Features" },
  { message = "^Adds? GitHub Actions", group = "🔄 CI/CD" },
  { message = "^Adds? initial", group = "🎉 Initial Setup" },
  { message = "^Adds? .*\\.gitignore", group = "🎉 Initial Setup" },
  { message = "^Adds? solution file", group = "🏗️ Project Structure" },
  { message = "^Adds? project reference", group = "🏗️ Project Structure" },
  { message = "^Adds? option to run in separate thread", group = "⚡ Performance" },
  { message = "^Add", group = "✨ Features" },

  # Gridr specific
  { message = ".*[Gg]ridr.*", group = "🎯 Gridr" },

  # Fixes
  { message = "^Fix.*bug", group = "🐛 Bug Fixes" },
  { message = "^Fix.*workflow", group = "🔄 CI/CD" },
  { message = "^Fix.*cliff", group = "📝 Release Process" },
  { message = "^Fix.*yml", group = "🔄 CI/CD" },
  { message = "^Fix.*release", group = "📝 Release Process" },
  { message = "^Fixes? version", group = "🔄 Updates" },
  { message = "^Fixes? .*quoting", group = "🐛 Bug Fixes" },
  { message = "^Fix", group = "🐛 Bug Fixes" },

  # Updates and improvements
  { message = "^Update.*version", group = "🔄 Updates" },
  { message = "^Updates? .*reference", group = "🏗️ Project Structure" },
  { message = "^Updates? submodule", group = "📦 Dependency Updates" },
  { message = "^Updates? release notes", group = "📝 Release Process" },
  { message = "^Update", group = "🔄 Updates" },
  { message = "^Improve.*progress", group = "⚡ Improvements" },
  { message = "^Improve", group = "⚡ Improvements" },
  { message = "^Enhance", group = "🔧 Enhancements" },
  { message = "^Extend", group = "🔧 Enhancements" },

  # Refactoring
  { message = "^Refactor.*compatible", group = "♻️ Refactoring" },
  { message = "^Refactored", group = "♻️ Refactoring" },

  # Reverts
  { message = "^[Rr]evert", group = "↩️ Reverts" },

  # Security and maintenance
  { body = ".*security", group = "🔒 Security" },
  { message = "^chore", group = "🧹 Maintenance" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags (matches both v1.3 and 241001 formats)
tag_pattern = "^(v[0-9]+\\.[0-9]+.*|[0-9]{6})$"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42